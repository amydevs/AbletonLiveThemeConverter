name: Rust

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  CARGO_TERM_COLOR: always
  BUILD_ARGS: "--release --features bin"

jobs:
  build:
      name: Build - ${{ matrix.platform.name }}
      # By default, runs on Ubuntu, otherwise, override with the desired os
      runs-on: ${{ matrix.platform.os || 'ubuntu-latest' }}
      strategy:
        matrix:
          # Set platforms you want to build your binaries on
          platform:
            # Linux
              # The name is used for pretty print
            - name: Linux x86_64
              # The used Rust target architecture
              target: x86_64-unknown-linux-gnu
            - name: Linux aarch64
              target: aarch64-unknown-linux-gnu
  
            # Mac OS
            - name: MacOS x86_64
              target: x86_64-apple-darwin
            - name: MacOS aarch64
              target: aarch64-apple-darwin
  
            # Windows
            - name: Windows x86_64
              # Use another GitHub action OS
              os: windows-latest
              target: x86_64-pc-windows-msvc
      steps:
        - uses: actions/checkout@v3
        - name: Install ${{ matrix.platform.target }} deps
          if: ${{ contains(matrix.platform.target, 'apple') }}
          run: rustup target add ${{ matrix.platform.target }}
        - name: Run tests
          run: cargo test --verbose
        - name: Build ${{ matrix.platform.name }} binary
          uses: actions-rs/cargo@v1
          # We use cross-rs if not running on x86_64 architecture on Linux
          with:
            command: build
            use-cross: ${{ !contains(matrix.platform.target, 'x86_64') }}
            args: ${{ env.BUILD_ARGS }} --target ${{ matrix.platform.target }}
        
      
    
